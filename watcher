#!/usr/bin/env python

# Includes
import getopt
import sys
import os.path
import subprocess
import BaseHTTPServer
import SocketServer
import threading

########  Predefined variables #########
helpstring = """Usage: {scriptname} args...
    Where args are:
        -h, --help
            Show help

        -p PORTNUMBER
            Port number to run on

        -m PATH/FILENAME
            Path where to look for the maintenance file at. If the file exists, we return a MAINT status.

        -c 'command'
            Command to use to check application status. Must return a 0 status if successful.

"""

helpstring = helpstring.format(scriptname=sys.argv[0])

# appCheck
# Returns true if all is good
# Returns false if it's not
def appCheck():
    if subprocess.call(checkcommand, shell=True) == 0:
        return True
    else:
        return False


########  Functions and classes #########
class ThreadedHTTPServer(SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    pass

class WatcherRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        if s.path == "/status" or s.path == "/gslbcheck":
            # Check status
            # Assume fail
            code = 503
            status = "FAIL"

            if(os.path.isfile(maintfile)):
                # Check for a maintenance file
                code = 503
                status="MAINT"
                s.log_message("Maintfile " + maintfile + " in place")
            elif s.path == "/gslbcheck" and os.path.isfile(maintfile + ".gslbcheck"):
                # Check for a maintenance file
                # Allow for different maintfile to be used for the gslbcheck. This allows us to trigger a GSLB failover without failing the 
                # main healthcheck
                code = 503
                status="MAINT"
                s.log_message("Maintfile " + maintfile + ".gslbcheck in place")
            else:
                if (appCheck() == True):
                    # If we're not in maintenance, run application check
                    code = 200
                    status="OK"
                else:
                    s.log_message("Application health check failed")

            s.send_response(code)
            s.send_header("Content-type", "text/html")
            s.end_headers()
            s.wfile.write(status)
        else:
            s.send_response(200)
            s.send_header("Content-type", "text/html")
            s.end_headers()
            s.wfile.write("watcher")

    # Disable logging DNS lookups
    def address_string(self):
        return str(self.client_address[0])

# Parse args
try:
    options, remainder = getopt.getopt(sys.argv[1:], "hp:m:c:", ['help'])
except:
    print("Invalid args. Use -h or --help for help.")
    raise
    sys.exit(1)

for opt, arg in options:
    if opt in ('-h', '--help'):
        print helpstring
        sys.exit(0)
    elif opt in ('-p'):
        HTTPPORT = int(arg)
    elif opt in ('-m'):
        maintfile = arg
    elif opt in ('-c'):
        checkcommand = arg

# Start HTTP service
server_class=ThreadedHTTPServer
handler_class=WatcherRequestHandler
server_address = ('', HTTPPORT)
httpd = server_class(server_address, handler_class)
try:
    httpd.serve_forever()
except KeyboardInterrupt:
    pass
httpd.server_close()
